input {
  udp {
    type  => "json-docker"
    port  => 5000
    codec => json
  }
}

filter {
  grok {
    break_on_match => false
    match => [ "message", "(?<openap.service>(?<=\s\sMS:\s)([\S]*))" ]
    tag_on_failure => []
  }
}

filter {
  grok {
    break_on_match => false
    match => [ "message", "(?<openap.api>(?<=\s\|\sAPI:\s)([\S]*))" ]
    tag_on_failure => []
  }
}

filter {
  grok {
    break_on_match => false
    match => [ "message", "(?<openap.user>(?<=\s\|\sUser:\s)([\S]*[@][\S]*))" ]
    tag_on_failure => []
  }
}

filter {
  grok {
    break_on_match => false
    match => [ "message", "(?<openap.usertype>(?<=\sUserType:\s)([\S]*))" ]
    tag_on_failure => []
  }
}

filter {
  grok {
    break_on_match => false
    match => [ "message", "(?<openap.tn>(?<=\sTN:\s)([\S]*))" ]
    tag_on_failure => []
  }
}

filter {
  grok {
    break_on_match => false
    match => [ "message", "(?<openap.performancelogger>(?<=PerformanceLogger\s\-\s)([\S]*))" ]
    tag_on_failure => []
  }
}

filter {
  grok {
    break_on_match => false
    match => [ "message", "(?<openap.executiontime>(?<=\sExecutionTime\s)([\d]*))" ]
    tag_on_failure => []
  }

  mutate {
    convert => { "openap.executiontime" => "integer" }
  }
}
